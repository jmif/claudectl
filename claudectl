#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

ACCOUNTS_DIR="$HOME/.claudectl"
SETTINGS_FILE="$ACCOUNTS_DIR/settings.json"
GLOBAL_CLAUDE_MD="$HOME/.claude/CLAUDE.md"
LOCAL_CLAUDE_MD="$ACCOUNTS_DIR/CLAUDE.md"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to create initial setup
setup_accounts_dir() {
    echo "Setting up Claudectl's config directory, $ACCOUNTS_DIR..."
    mkdir -p "$ACCOUNTS_DIR"
    
    # Create default settings.json
    cat > "$SETTINGS_FILE" << 'EOF'
{
  "accounts": [
    "Work",
    "Other"
  ]
}
EOF
    
    echo "Created $ACCOUNTS_DIR directory and settings.json"
    echo "Edit the settings.json file to configure account profiles for your Claude Code accounts."
}

# Function to parse JSON and get account names
get_account_names() {
    if command -v jq > /dev/null 2>&1; then
        jq -r '.accounts[]' "$SETTINGS_FILE" 2>/dev/null
    else
        # Fallback without jq - basic parsing
        grep -o '"[^"]*"' "$SETTINGS_FILE" | grep -v '"accounts"' | sed 's/"//g'
    fi
}

# Function to copy global CLAUDE.md to local claudectl directory
copy_claude_md() {
    if [ ! -f "$GLOBAL_CLAUDE_MD" ]; then
        echo "Error: Global CLAUDE.md not found at $GLOBAL_CLAUDE_MD"
        echo "Make sure you have Claude Code installed and configured first."
        exit 1
    fi
    
    if [ ! -d "$ACCOUNTS_DIR" ]; then
        echo "Error: Claudectl not set up. Run 'claudectl' first to initialize."
        exit 1
    fi
    
    if [ -f "$LOCAL_CLAUDE_MD" ]; then
        echo "Warning: $LOCAL_CLAUDE_MD already exists."
        echo "Do you want to overwrite it? (y/N): "
        read -n1 -s choice
        echo
        if [[ "$choice" != "y" && "$choice" != "Y" ]]; then
            echo "Cancelled."
            exit 0
        fi
    fi
    
    echo "Copying $GLOBAL_CLAUDE_MD to $LOCAL_CLAUDE_MD..."
    cp "$GLOBAL_CLAUDE_MD" "$LOCAL_CLAUDE_MD"
    echo "Success! All profiles will now use the local CLAUDE.md file."
    echo "You can edit it with: claudectl edit-claude-md"
}

# Function to check if a directory would create a circular link
is_circular_link() {
    local source_dir="$1"
    local target_dir="$2"
    
    # Get absolute paths
    local abs_source=$(cd "$source_dir" 2>/dev/null && pwd)
    local abs_target=$(cd "$target_dir" 2>/dev/null && pwd)
    
    if [ -z "$abs_source" ] || [ -z "$abs_target" ]; then
        return 1  # One of the paths doesn't exist, not circular
    fi
    
    # Only circular if one directory is actually inside the other
    # Check if target is inside source
    case "$abs_target/" in
        "$abs_source/"*) return 0 ;;  # Circular - target inside source
    esac
    
    # Check if source is inside target  
    case "$abs_source/" in
        "$abs_target/"*) return 0 ;;  # Circular - source inside target
    esac
    
    return 1  # Not circular
}

# Function to import global claude setup into a profile
import_global() {
    local profile="$1"
    
    if [ -z "$profile" ]; then
        echo "Error: Profile name required."
        echo "Usage: claudectl import-global PROFILE"
        exit 1
    fi
    
    # Check if profile exists in settings
    local accounts=($(get_account_names))
    local found=false
    for account in "${accounts[@]}"; do
        if [[ "$(echo "$account" | tr '[:upper:]' '[:lower:]')" = "$(echo "$profile" | tr '[:upper:]' '[:lower:]')" ]]; then
            found=true
            profile="$account" # Use the exact case from settings
            break
        fi
    done
    
    if [ "$found" = false ]; then
        echo "Error: Profile '$profile' not found in settings.json"
        echo "Available profiles: $(IFS=', '; echo "${accounts[*]}")"
        exit 1
    fi
    
    local global_claude_dir="$HOME/.claude"
    local profile_dir="$ACCOUNTS_DIR/$profile"
    
    if [ ! -d "$global_claude_dir" ]; then
        echo "Error: Global Claude directory not found at $global_claude_dir"
        echo "Make sure Claude Code is installed and configured first."
        exit 1
    fi
    
    # Check for circular links
    if is_circular_link "$global_claude_dir" "$profile_dir"; then
        echo "Error: Cannot import from $global_claude_dir to $profile_dir"
        echo "This would create a circular reference."
        exit 1
    fi
    
    # Create profile directory if it doesn't exist
    if [ ! -d "$profile_dir" ]; then
        echo "Creating profile directory: $profile_dir"
        mkdir -p "$profile_dir"
    fi
    
    # Check if profile already has config files (excluding just CLAUDE.md)
    if [ -d "$profile_dir" ] && [ "$(ls -A "$profile_dir" 2>/dev/null | grep -v '^CLAUDE.md$' | wc -l)" -gt 0 ]; then
        echo "Warning: Profile '$profile' already has configuration files."
        echo "This will overwrite existing configuration. Continue? (y/N): "
        read -n1 -s choice
        echo
        if [[ "$choice" != "y" && "$choice" != "Y" ]]; then
            echo "Cancelled."
            exit 0
        fi
    fi
    
    echo "Importing global Claude setup into profile '$profile'..."
    
    # Copy all items except CLAUDE.md (we handle that separately)
    # Use portable globbing that works across all shells
    for item in "$global_claude_dir"/* "$global_claude_dir"/.*; do
        [ -e "$item" ] || continue  # Skip if glob didn't match
        [ "$item" = "$global_claude_dir/." ] && continue   # Skip .
        [ "$item" = "$global_claude_dir/.." ] && continue  # Skip ..
        
        itemname=$(basename "$item")
        if [ "$itemname" != "CLAUDE.md" ]; then
            echo "Copying $itemname..."
            # Remove existing file/directory if it exists
            [ -e "$profile_dir/$itemname" ] && rm -rf "$profile_dir/$itemname"
            
            if [ -d "$item" ]; then
                cp -r "$item" "$profile_dir/"
            else
                cp "$item" "$profile_dir/"
            fi
        fi
    done
    
    # Handle CLAUDE.md linking as usual
    if [ -f "$LOCAL_CLAUDE_MD" ]; then
        ln -sf "$LOCAL_CLAUDE_MD" "$profile_dir/CLAUDE.md"
        echo "Linked local CLAUDE.md"
    elif [ -f "$GLOBAL_CLAUDE_MD" ]; then
        ln -sf "$GLOBAL_CLAUDE_MD" "$profile_dir/CLAUDE.md"
        echo "Linked global CLAUDE.md"
    fi
    
    echo "Success! Global Claude setup imported into profile '$profile'."
    echo "You can now use: claudectl $profile"
}

# Function to create symlinks to global claude setup in a profile
link_global() {
    local profile="$1"
    
    if [ -z "$profile" ]; then
        echo "Error: Profile name required."
        echo "Usage: claudectl link-global PROFILE"
        exit 1
    fi
    
    # Check if profile exists in settings
    local accounts=($(get_account_names))
    local found=false
    for account in "${accounts[@]}"; do
        if [[ "$(echo "$account" | tr '[:upper:]' '[:lower:]')" = "$(echo "$profile" | tr '[:upper:]' '[:lower:]')" ]]; then
            found=true
            profile="$account" # Use the exact case from settings
            break
        fi
    done
    
    if [ "$found" = false ]; then
        echo "Error: Profile '$profile' not found in settings.json"
        echo "Available profiles: $(IFS=', '; echo "${accounts[*]}")"
        exit 1
    fi
    
    local global_claude_dir="$HOME/.claude"
    local profile_dir="$ACCOUNTS_DIR/$profile"
    
    if [ ! -d "$global_claude_dir" ]; then
        echo "Error: Global Claude directory not found at $global_claude_dir"
        echo "Make sure Claude Code is installed and configured first."
        exit 1
    fi
    
    # Check for circular links
    if is_circular_link "$global_claude_dir" "$profile_dir"; then
        echo "Error: Cannot link from $global_claude_dir to $profile_dir"
        echo "This would create a circular reference."
        exit 1
    fi
    
    # Create profile directory if it doesn't exist
    if [ ! -d "$profile_dir" ]; then
        echo "Creating profile directory: $profile_dir"
        mkdir -p "$profile_dir"
    fi
    
    # Check if profile already has config files (excluding just CLAUDE.md)
    if [ -d "$profile_dir" ] && [ "$(ls -A "$profile_dir" 2>/dev/null | grep -v '^CLAUDE.md$' | wc -l)" -gt 0 ]; then
        echo "Warning: Profile '$profile' already has configuration files."
        echo "This will create symlinks that may interfere with existing configuration. Continue? (y/N): "
        read -n1 -s choice
        echo
        if [[ "$choice" != "y" && "$choice" != "Y" ]]; then
            echo "Cancelled."
            exit 0
        fi
    fi
    
    echo "Creating symlinks to global Claude setup in profile '$profile'..."
    
    # Create symlinks for all items except CLAUDE.md (we handle that separately)
    # Use portable globbing that works across all shells
    for item in "$global_claude_dir"/* "$global_claude_dir"/.*; do
        [ -e "$item" ] || continue  # Skip if glob didn't match
        [ "$item" = "$global_claude_dir/." ] && continue   # Skip .
        [ "$item" = "$global_claude_dir/.." ] && continue  # Skip ..
        
        itemname=$(basename "$item")
        if [ "$itemname" != "CLAUDE.md" ]; then
            echo "Linking $itemname..."
            # Remove existing file/link if it exists
            [ -e "$profile_dir/$itemname" ] && rm -rf "$profile_dir/$itemname"
            ln -sf "$item" "$profile_dir/"
        fi
    done
    
    # Handle CLAUDE.md linking as usual
    if [ -f "$LOCAL_CLAUDE_MD" ]; then
        ln -sf "$LOCAL_CLAUDE_MD" "$profile_dir/CLAUDE.md"
        echo "Linked local CLAUDE.md"
    elif [ -f "$GLOBAL_CLAUDE_MD" ]; then
        ln -sf "$GLOBAL_CLAUDE_MD" "$profile_dir/CLAUDE.md"
        echo "Linked global CLAUDE.md"
    fi
    
    echo "Success! Global Claude setup linked into profile '$profile'."
    echo "You can now use: claudectl $profile"
}

# Function to edit the local CLAUDE.md file
edit_claude_md() {
    if [ ! -f "$LOCAL_CLAUDE_MD" ]; then
        echo "Error: Local CLAUDE.md not found at $LOCAL_CLAUDE_MD"
        echo "Run 'claudectl copy-claude-md' first to create it."
        exit 1
    fi
    
    local editor_cmd="${EDITOR:-vim}"
    echo "Opening local CLAUDE.md with $editor_cmd..."
    if ! bash -lc "$editor_cmd \"$LOCAL_CLAUDE_MD\""; then
        echo "Falling back to vim..."
        vim "$LOCAL_CLAUDE_MD"
    fi
}

# Function to show help
show_help() {
    echo "claudectl - Claude Code Multi-Account Manager"
    echo ""
    echo "USAGE:"
    echo "  claudectl [PROFILE] [CLAUDE_ARGS...]"
    echo "  claudectl [COMMAND]"
    echo ""
    echo "PROFILE EXAMPLES:"
    echo "  claudectl                    # Show interactive menu"
    echo "  claudectl Work               # Launch directly with Work profile"
    echo "  claudectl personal           # Launch with Personal (default) profile"
    echo "  claudectl Work --help        # Launch Work profile and pass --help to claude"
    echo ""
    echo "COMMANDS:"
    echo "  copy-claude-md               # Copy ~/.claude/CLAUDE.md to ~/.claudectl/CLAUDE.md"
    echo "  edit-claude-md               # Edit the local ~/.claudectl/CLAUDE.md file"
    echo "  import-global PROFILE        # Copy global Claude setup into a profile"
    echo "  link-global PROFILE          # Create symlinks to global Claude setup in a profile"
    echo "  --help, -h, help             # Show this help"
    echo ""
    echo "PROFILES:"
    if [ -f "$SETTINGS_FILE" ]; then
        local accounts=($(get_account_names))
        echo "  personal (default)           # Uses standard ~/.claude config"
        for account in "${accounts[@]}"; do
            if [ -n "$account" ]; then
                printf "  %-28s # Uses ~/.claudectl/%s config\n" "$account" "$account"
            fi
        done
    else
        echo "  Run claudectl to set up profiles"
    fi
    echo ""
    echo "NOTES:"
    echo "  - Profile names are case-insensitive"
    echo "  - All arguments after profile name are passed to claude"
    echo "  - Use 'e' in interactive menu to edit profiles"
    echo ""
}

# Function to launch a specific profile
launch_profile() {
    local profile="$1"
    shift # Remove profile name from arguments
    
    # Handle "personal" or "default" profile
    if [[ "$profile" = "personal" || "$profile" = "default" ]]; then
        echo "Launching Claude Code CLI with Personal profile..."
        exec env -u CLAUDE_CONFIG_DIR claude "$@"
    fi
    
    # Check if profile exists in settings
    local accounts=($(get_account_names))
    local found=false
    for account in "${accounts[@]}"; do
        if [[ "$(echo "$account" | tr '[:upper:]' '[:lower:]')" = "$(echo "$profile" | tr '[:upper:]' '[:lower:]')" ]]; then
            found=true
            profile="$account" # Use the exact case from settings
            break
        fi
    done
    
    if [ "$found" = false ]; then
        echo "Error: Profile '$profile' not found in settings.json"
        echo "Available profiles: Personal (default), $(IFS=', '; echo "${accounts[*]}")"
        exit 1
    fi
    
    # Launch the profile
    local config_dir="$ACCOUNTS_DIR/$profile"
    if [ ! -d "$config_dir" ]; then
        echo "Creating profile directory: $config_dir"
        mkdir -p "$config_dir"
    fi
    
    # Link CLAUDE.md into profile directory (prefer local, fallback to global)
    if [ -f "$LOCAL_CLAUDE_MD" ]; then
        ln -sf "$LOCAL_CLAUDE_MD" "$config_dir/CLAUDE.md"
    elif [ -f "$GLOBAL_CLAUDE_MD" ]; then
        ln -sf "$GLOBAL_CLAUDE_MD" "$config_dir/CLAUDE.md"
    fi
    
    echo "Launching Claude Code CLI with $profile profile..."
    exec env CLAUDE_CONFIG_DIR="$config_dir" claude "$@"
}

# Function to show account selection menu
show_menu() {
    echo "* claudectl"
    echo "Written By Claude Code For Claude Code"
    echo "Select a profile to launch the Claude Code CLI"
    echo "=============================================="
    
    local accounts=($(get_account_names))
    local menu_options=()
    local i=1
    
    # Add Personal (default) option first
    echo "$i) Personal (default)"
    menu_options+=("personal")
    ((i++))
    
    # Add account options
    for account in "${accounts[@]}"; do
        if [ -n "$account" ]; then
            echo "$i) $account"
            menu_options+=("$account")
            ((i++))
        fi
    done
    
    # Add edit settings option
    echo "e) Edit settings.json"
    echo "h) Show help"
    
    echo ""
    echo "Press a key (1-$((i-1)), e, h, first letter, or Enter for Default):"
    
    # Read single character without requiring enter
    read -n1 -s choice
    echo # Add newline after input
    
    # Handle edit option (E or e)
    if [[ "$choice" = "E" || "$choice" = "e" ]]; then
        local editor_cmd="${EDITOR:-vim}"
        echo "Opening settings.json with $editor_cmd..."
        if ! bash -lc "$editor_cmd \"$SETTINGS_FILE\""; then
            echo "Falling back to vim..."
            vim "$SETTINGS_FILE"
        fi
        exit 0
    fi
    
    # Handle help option (H or h)
    if [[ "$choice" = "H" || "$choice" = "h" ]]; then
        echo ""
        show_help
        exit 0
    fi
    
    # Handle enter key (same as option 1 - Personal)
    if [[ "$choice" = "" ]]; then
        choice="1"
    fi
    
    # Handle first letter matching
    local selected=""
    local choice_upper=$(echo "$choice" | tr '[:lower:]' '[:upper:]')
    local choice_lower=$(echo "$choice" | tr '[:upper:]' '[:lower:]')
    
    # Check Personal first (P or p)
    if [[ "$choice_upper" = "P" ]]; then
        selected="personal"
    else
        # Check accounts from settings for first letter match
        for account in "${menu_options[@]}"; do
            if [ "$account" != "personal" ]; then
                local first_letter=$(echo "$account" | cut -c1 | tr '[:lower:]' '[:upper:]')
                if [[ "$choice_upper" = "$first_letter" ]]; then
                    selected="$account"
                    break
                fi
            fi
        done
    fi
    
    # If no letter match found, try numeric choice
    if [ -z "$selected" ] && [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $((i-1)) ]; then
        selected="${menu_options[$((choice-1))]}"
    fi
    
    # Execute the selection
    if [ -n "$selected" ]; then
        if [ "$selected" = "personal" ]; then
            echo "Launching Claude Code CLI with Personal profile..."
            exec env -u CLAUDE_CONFIG_DIR claude "$@"
        else
            local config_dir="$ACCOUNTS_DIR/$selected"
            if [ ! -d "$config_dir" ]; then
                echo "Creating profile directory: $config_dir"
                mkdir -p "$config_dir"
            fi
            # Link global CLAUDE.md into profile directory
            ln -sf "$GLOBAL_CLAUDE_MD" "$config_dir/CLAUDE.md"
            echo "Launching Claude Code CLI with $selected profile..."
            exec env CLAUDE_CONFIG_DIR="$config_dir" claude "$@"
        fi
    else
        echo "Invalid selection. Please try again."
        exit 1
    fi
}

# Main execution
main() {
    # Check if accounts directory exists
    if [ ! -d "$ACCOUNTS_DIR" ]; then
        setup_accounts_dir
        echo ""
    fi
    
    # Check if settings file exists
    if [ ! -f "$SETTINGS_FILE" ]; then
        echo "Error: settings.json not found. Running setup..."
        setup_accounts_dir
        echo ""
    fi
    
    # Check for help flags
    if [ $# -gt 0 ] && [[ "$1" = "-h" || "$1" = "--help" || "$1" = "help" ]]; then
        show_help
        exit 0
    fi
    
    # Check for special commands
    if [ $# -gt 0 ]; then
        case "$1" in
            "copy-claude-md")
                copy_claude_md
                exit 0
                ;;
            "edit-claude-md")
                edit_claude_md
                exit 0
                ;;
            "import-global")
                if [ $# -lt 2 ]; then
                    echo "Error: Profile name required."
                    echo "Usage: claudectl import-global PROFILE"
                    exit 1
                fi
                import_global "$2"
                exit 0
                ;;
            "link-global")
                if [ $# -lt 2 ]; then
                    echo "Error: Profile name required."
                    echo "Usage: claudectl link-global PROFILE"
                    exit 1
                fi
                link_global "$2"
                exit 0
                ;;
        esac
    fi
    
    # Check if profile name was provided as argument
    if [ $# -gt 0 ] && [ "$1" != "" ]; then
        launch_profile "$@"
    else
        # Show interactive menu
        show_menu "$@"
    fi
}

# Run main function
main "$@"
